import React from 'react';
import styles from './index.less';
function FormulaDisplay() {

    return (
            <div className={styles.normal}> 
                <table><thead><tr><th><strong>函数名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>sysdate()</td><td>返回当前日期对象 java.util.Date</td></tr><tr><td>rand()</td><td>返回一个介于 0-1 的随机数,double 类型</td></tr><tr><td>rand(n)</td><td>返回一个介于 0- n 的随机数,long 类型</td></tr><tr><td>print([out],obj)</td><td>打印对象,如果指定 out,向 out 打印, 否则输出到控制台</td></tr><tr><td>println([out],obj)</td><td>与 print 类似,但是在输出后换行</td></tr><tr><td>now()</td><td>返回 System.currentTimeMillis</td></tr><tr><td>long(v)</td><td>将值的类型转为 long</td></tr><tr><td>double(v)</td><td>将值的类型转为 double</td></tr><tr><td>boolean(v)</td><td>将值的类型转为 boolean，除了 nil 和 false，其他都值都将转为布尔值 true。</td></tr><tr><td>str(v)</td><td>将值的类型转为 string</td></tr><tr><td>identity(v)</td><td>返回参数 v 自身，用于跟 seq 库的高阶函数配合使用。</td></tr><tr><td>max(v1,v2,v3, ...)</td><td>返回参数列表中的最大值，比较规则遵循 aviator 规则。</td></tr><tr><td>min(v1,v2,v3, ...)</td><td>返回参数列表中的最小值，比较规则遵循 aviator 规则。</td></tr><tr><td>date_to_string(date,format)</td><td>将 Date 对象转化化特定格式的字符串,2.1.1 新增</td></tr><tr><td>string_to_date(source,format)</td><td>将特定格式的字符串转化为 Date 对 象,2.1.1 新增</td></tr><tr><td>string.contains(s1,s2)</td><td>判断 s1 是否包含 s2,返回 Boolean</td></tr><tr><td>string.length(s)</td><td>求字符串长度,返回 Long</td></tr><tr><td>string.startsWith(s1,s2)</td><td>s1 是否以 s2 开始,返回 Boolean</td></tr><tr><td>string.endsWith(s1,s2)</td><td>s1 是否以 s2 结尾,返回 Boolean</td></tr><tr><td>string.substring(s,begin[,end])</td><td>截取字符串 s,从 begin 到 end,如果忽略 end 的话,将从 begin 到结尾,与 java.util.String.substring 一样。</td></tr><tr><td>string.indexOf(s1,s2)</td><td>java 中的 s1.indexOf(s2),求 s2 在 s1 中 的起始索引位置,如果不存在为-1</td></tr><tr><td>string.split(target,regex,[limit])</td><td>Java 里的 String.split 方法一致,2.1.1 新增函数</td></tr><tr><td>string.join(seq,seperator)</td><td>将集合 seq 里的元素以 seperator 为间隔 连接起来形成字符串,2.1.1 新增函数</td></tr><tr><td>string.replace_first(s,regex,replacement)</td><td>Java 里的 String.replaceFirst 方法, 2.1.1 新增</td></tr><tr><td>string.replace_all(s,regex,replacement)</td><td>Java 里的 String.replaceAll 方法 , 2.1.1 新增</td></tr><tr><td>math.abs(d)</td><td>求 d 的绝对值</td></tr><tr><td>math.sqrt(d)</td><td>求 d 的平方根</td></tr><tr><td>math.pow(d1,d2)</td><td>求 d1 的 d2 次方</td></tr><tr><td>math.log(d)</td><td>求 d 的自然对数</td></tr><tr><td>math.log10(d)</td><td>求 d 以 10 为底的对数</td></tr><tr><td>math.sin(d)</td><td>正弦函数</td></tr><tr><td>math.cos(d)</td><td>余弦函数</td></tr><tr><td>math.tan(d)</td><td>正切函数</td></tr><tr><td>map(seq,fun)</td><td>将函数 fun 作用到集合 seq 每个元素上, 返回新元素组成的集合</td></tr><tr><td>filter(seq,predicate)</td><td>将谓词 predicate 作用在集合的每个元素 上,返回谓词为 true 的元素组成的集合</td></tr><tr><td>count(seq)</td><td>返回集合大小</td></tr><tr><td>include(seq,element)</td><td>判断 element 是否在集合 seq 中,返回 boolean 值</td></tr><tr><td>sort(seq)</td><td>排序集合,仅对数组和 List 有效,返回排 序后的新集合</td></tr><tr><td>reduce(seq,fun,init)</td><td>fun 接收两个参数,第一个是集合元素, 第二个是累积的函数,本函数用于将 fun 作用在结果值（初始值为 init 指定)和集合的每个元素上面，返回新的结果值；函数返回最终的结果值</td></tr><tr><td>seq.every(seq, fun)</td><td>fun 接收集合的每个元素作为唯一参数，返回 true 或 false。当集合里的每个元素调用 fun 后都返回 true 的时候，整个调用结果为 true，否则为 false。</td></tr><tr><td>seq.not_any(seq, fun)</td><td>fun 接收集合的每个元素作为唯一参数，返回 true 或 false。当集合里的每个元素调用 fun 后都返回 false 的时候，整个调用结果为 true，否则为 false。</td></tr><tr><td>seq.some(seq, fun)</td><td>fun 接收集合的每个元素作为唯一参数，返回 true 或 false。当集合里的只要有一个元素调用 fun 后返回 true 的时候，整个调用结果立即为 true，否则为 false。</td></tr><tr><td>seq.eq(value)</td><td>返回一个谓词,用来判断传入的参数是否跟 value 相等,用于 filter 函数,如filter(seq,seq.eq(3)) 过滤返回等于3 的元素组成的集合</td></tr><tr><td>seq.neq(value)</td><td>与 seq.eq 类似,返回判断不等于的谓词</td></tr><tr><td>seq.gt(value)</td><td>返回判断大于 value 的谓词</td></tr><tr><td>seq.ge(value)</td><td>返回判断大于等于 value 的谓词</td></tr><tr><td>seq.lt(value)</td><td>返回判断小于 value 的谓词</td></tr><tr><td>seq.le(value)</td><td>返回判断小于等于 value 的谓词</td></tr><tr><td>seq.nil()</td><td>返回判断是否为 nil 的谓词</td></tr><tr><td>seq.exists()</td><td>返回判断不为 nil 的谓词</td></tr><tr><td>seq.and(p1, p2, p3, ...)</td><td>组合多个谓词函数，返回一个新的谓词函数，当今仅当 p1、p2、p3 ...等所有函数都返回 true 的时候，新函数返回 true</td></tr><tr><td>seq.or(p1, p2, p3, ...)</td><td>组合多个谓词函数，返回一个新的谓词函数，当 p1, p2, p3... 其中一个返回 true 的时候，新函数立即返回 true，否则返回 false。</td></tr><tr><td>seq.list(p1, p2, p3, ...)</td><td>创建一个 java.util.ArrayList 实例，添加参数到这个集合并返回。</td></tr><tr><td>seq.set(p1, p2, p3, ...)</td><td>创建一个 java.util.HashSet 实例，添加参数到这个集合并返回。</td></tr><tr><td>seq.map(k1, v1, k2, v2, ...)</td><td>创建一个 java.util.HashMap 实例，参数要求偶数个，类似 k1,v1 这样成对作为 key-value 存入 map，返回集合。</td></tr><tr><td>seq.add(coll, element)</td><td>往集合 coll 添加元素，集合可以是 java.util.Collection，也可以是 java.util.Map（三参数版本）</td></tr><tr><td>seq.remove(coll, element)</td><td>从集合或者 hash map 中删除元素或者 key</td></tr><tr><td>seq.get(coll, element)</td><td>从 list、数组或者 hash-map 获取对应的元素值，对于 list 和数组， element 为元素的索引位置（从 0 开始），对于 hash map 来说， element 为 key。</td></tr><tr><td>seq.min(coll)</td><td>返回集合中的最小元素，要求集合元素可比较（实现 Comprable 接口），比较规则遵循 aviator 规则。</td></tr><tr><td>seq.max(coll)</td><td>返回集合中的最大元素，要求集合元素可比较（实现 Comprable 接口），比较规则遵循 aviator 规则。</td></tr><tr><td>seq.contains_key(map, key)</td><td>当 map 中存在 key 的时候（可能为 null），返回 true。</td></tr></tbody></table>
            </div>
    
    )
}
export default FormulaDisplay;